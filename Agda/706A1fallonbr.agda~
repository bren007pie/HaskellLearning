module 706A1fallonbr where


{-# BUILTIN NATURAL ℕ #-}  -- Pragma for naturals and operations on the naturals
{-# BUILTIN NATPLUS _+_ #-}  
{-# BUILTIN NATTIMES _*_ #-}


-- Some useful term imports from the standard library:
import Relation.Binary.PropositionalEquality as Eq 
open Eq using (_≡_; refl) 
open Eq.≡-Reasoning using (begin_; _≡⟨⟩_; _∎)  



-- Bookmarker: "Bin Exercise"

-- This is a comment.

{-
  This is a multi-line comment
-}

-- Definition of datatype representing natural numbers. 

data ℕ : Set where  -- natural numbers defined inductively. Data tells use its inductively defined with constructors, set says it's a datatype and where seperates the declaration of the datatype and constructors.
  zero : ℕ  -- Green are constructors, base case
  suc  : ℕ → ℕ  -- inductive case
-- it's inductive because we build up a set from a base case to cover all cases

-- A couple of definitions using this datatype.

one : ℕ
one = suc zero

two : ℕ
two = suc (suc zero)

three : ℕ
three = suc two

fourteen : ℕ  -- fourteen has a type of natural numer, is a value of it
vfourteen = suc (suc (suc (suc (suc (suc (suc (suc (suc (suc (suc (suc (suc (suc zero)))))))))))))

{- I am excited to type ∀ and → and ≤ and ≡ !! -}

-- I could have also said two = suc one.

-- Write out 7 in longhand
seven : ℕ
seven = suc (suc (suc (suc (suc (suc (suc zero))))))

-- Pragma to use decimal notation as shorthand.

{-# BUILTIN NATURAL ℕ #-}
-- This is a Pragma, denoted by comments with a # build in {-# Pragma #-}
-- Using the pragma still requires the inductive definition but lets us abreivate to 0, as well as use Haskell types for effecient storage of the numbers


-- Some useful imports from the standard library:

import Relation.Binary.PropositionalEquality as Eq  -- much like Python we want to import the standard library (propositional equality) as an abreivated term
open Eq using (_≡_; refl)  -- adds these names from the package to our scope (equality and refl for two terms are equal)
open Eq.≡-Reasoning using (begin_; _≡⟨⟩_; _∎)  -- Using a different odule to import more names to our scope for our uses

-- The underlines "_≡_" indicate infix or mixfix operates. E.g. "_+_" is an infix operator between stuff, "begin_" is a prefix operator, and "_∎" is a postfix operator.
--() and ; can't appear in names so they define and seperate out the list

-- Addition on naturals.

_+_ : ℕ → ℕ → ℕ  -- type inputs two natural numbers and gives a natural back. Turns out infix is shorthand for function application. So m + n ≡ _ + _ m n!
zero + n = n  -- So here we use pattern matching for the base and inductive case. This is zero is identity.
suc m + n = suc (m + n)  -- This is just associativity of addition. Q) how come we don't use ≡ here?
-- This is a recursive definition b.c. addition defined in terms of addition. Larger numbers defined in terms of addition of smaller numbers. This is well formed.
-- Use = for definitions and ≡ for asserting that two things are the same.

-- Agda normalization; proof of equality.

_ : 2 + 3 ≡ 5  -- Here we're doing a proof. We're showing that 2+3 = 5 based off of induction proof.
_ =
  begin
    2 + 3  -- left side
  ≡⟨⟩
    (suc (suc zero)) + (suc (suc (suc zero)))  -- written in suc form
  ≡⟨⟩
    suc ((suc zero) + (suc (suc (suc zero))))  -- inductive based, based on definition of addition
   ≡⟨⟩   
    suc (suc (zero + (suc (suc (suc zero)))))  -- definition of addition
  ≡⟨⟩    
    suc (suc (suc (suc (suc zero))))  -- definition of addition
  ≡⟨⟩    
    5  -- evaluating
  ∎
   

-- Equational reasoning.

_ : 2 + 3 ≡ 5  -- here _ is a dummy name that can be reused, the : gives the type
_ =  -- here the = gives the binding 
  begin  -- beging and end to show the begining and ending of the proof
    2 + 3
  ≡⟨⟩    -- is shorthand for
    (suc (suc zero)) + (suc (suc (suc zero)))
  ≡⟨⟩    -- many steps condensed
    5
  ∎

-- can also write proof  by using shorthand
_ : 2 + 3 ≡ 5
_ =
  begin
    2 + 3
  ≡⟨⟩
    suc (1 + 3)
  ≡⟨⟩
    suc (suc (0 + 3))
  ≡⟨⟩
    suc (suc 3)
  ≡⟨⟩
    5
  ∎

-- The proof can even be this short because Agda can evaluate and know it's the same
-- Binary relation is reflexive if every value relates to itself. In this case each side is equal so ls=rs and we write refl. 
_ : 2 + 3 ≡ 5  -- here this is the type
_ = refl  -- the list of terms here are of the above type or evidence for the assertion (so it's both proposition and evidence) 



-- PLFA shows longhand and shorthand are interchangeable.

-- PLFA exercise: write out the reduction for 3+4 equationally.

_ : 3 + 4 ≡ 7  -- proof for 3+4=7 in shorthand
_ = refl

_ : 3 + 4 ≡ 7  -- longhand proof for 3 +4 ≡ 7
_ =
  begin
    3 + 4
  ≡⟨⟩
    (suc (suc (suc zero))) + (suc (suc (suc (suc zero))))  -- long hand
  ≡⟨⟩
    suc ( (suc (suc zero)) + (suc (suc (suc (suc zero)))))  -- definition of addition
  ≡⟨⟩
    suc (suc ( (suc zero) + (suc (suc (suc (suc zero))))))  -- definition of addition
  ≡⟨⟩
    suc ( suc ( suc ( zero + (suc (suc (suc (suc zero))))))) -- definition of addition
  ≡⟨⟩
    suc ( suc ( suc ( suc (suc (suc (suc zero))))))  -- definition of addition
  ≡⟨⟩
    7  -- shorthand
  ∎
-- nice it works!


-- Multiplication.

_*_ : ℕ → ℕ → ℕ -- multiplication takes two naturals and spits out a natural
-- case split here, m is the induction variable so increment
zero * n = zero  -- Multiplication by 0. Before I was dumb and wrote zero*n = n
(suc m) * n = n + (m * n) --distributivity of multiplication

-- Can wrewrite as 0*n ≡ 0, (1+m)*n = n + (m * n)


_ : 2 * 3 ≡ 6
_ =
  begin
    2 * 3
  ≡⟨⟩    -- many steps condensed
    3 + (1 * 3)  -- defiition of *
  ≡⟨⟩
    3 + (3 + (0 * 3)) -- definition of *
  ≡⟨⟩
     3 + (3 + 0)  -- definition of *
  ≡⟨⟩
    3 + 3 -- simplify
  ≡⟨⟩
    6
  ∎


-- PLFA exercise: write out 3*4.

_ : 3 * 4 ≡ 12
_ =
  begin
    3 * 4  -- left side
  ≡⟨⟩
    4 + (2 * 4)  -- induction step
  ≡⟨⟩
    4 + (4 + (1 * 4)) --induction step
  ≡⟨⟩
    4 + (4 + (4 + (0 * 4)))  -- induction step
  ≡⟨⟩
    4 + (4 + (4 + 0))  -- definition of multiplication
  ≡⟨⟩
    12  -- simplication
  ∎


-- 747 exercise: Exponentiation (1 point)
-- Define exponentiation (m raised to the power n).
-- 0 ^ 0 = 1 for this exercise.

_^_ : ℕ → ℕ → ℕ
m ^ zero = 1
m ^ suc n = m * (m ^ n) -- defined on left hand size just so parts are on LHS

-- One test for exponentiation (you should write others).

_ : 2 ^ 3 ≡ 8
_ = refl

_ : 0 ^ 0 ≡ 1  -- short style proof
_ = refl

_ : 3 ^ 4 ≡ 81 -- long style proof
_ =
  begin
    3 ^ 4 -- left hand side
  ≡⟨⟩
    3 * (3 ^ 3)  -- induction step
  ≡⟨⟩
    3 * (3 * (3 ^ 2))  -- inductoin step
  ≡⟨⟩
    3 * (3 * (3 * (3 ^ 1))) -- induction step
  ≡⟨⟩
    3 * (3 * (3 * (3 * (3 ^ 0)))) -- induction step
  ≡⟨⟩
    3 * (3 * (3 * (3 * 1))) -- definition of exponentiation
  ≡⟨⟩
    81  -- simplification
  ∎
  
-- Monus (subtraction for naturals, bottoms out at zero so no negative numbers). Check to make sure m ≥ n when doing any math

_∸_ : ℕ → ℕ → ℕ
m ∸ zero = m
zero ∸ suc n = 0  -- uses pattern matching against both arguments
suc m ∸ suc n = m ∸ n

_ =
  begin
     3 ∸ 2
  ≡⟨⟩ -- many steps condensed
     2 ∸ 1 -- induction step
   ≡⟨⟩
     1 ∸ 0 -- induction step
   ≡⟨⟩
     1  -- definition of monus
  ∎

_ =
  begin
     2 ∸ 3
  ≡⟨⟩
    1 ∸ 2 -- induction step
  ≡⟨⟩
    0 ∸ 1 -- induction step
  ≡⟨⟩
     0  -- definition of monus
  ∎

-- PLFA exercise: write out 5 ∸ 3 and 3 ∸ 5.

_ : 5 ∸ 3 ≡ 2
_ = refl


_ : 3 ∸ 5 ≡ 0
_ = refl

-- Precedence: Function applications binds tighter or has presidence over any operator. Addition associates to the left means m + n + p = (m + n) + p

infixl 6  _+_  _∸_  -- states that addition and monus have a presidence level 6
infixl 7  _*_  -- multiplication has a presidence level 7, higher is more tightly bound.
-- infixl means the operator associates to the left. infixr means it associates to the right, infix means you always need to write parenthesis

-- Currying: represent multi argument function with a function the returns the next argument.
-- Function arrows associate to the right so ℕ → ℕ → ℕ = ℕ → (ℕ → ℕ)
-- _+_ 2 3 stands for (_+_ 2) 3. _+_ 2 is a function that adds two to the argument

-- If we've already defined an infinite set of natural numbers we don't have to define them inductively. 

-- These pragmas will register our operations, if we want,
-- so that they work with decimal notation.

-- There's a whole ramble about the story of creation and different ways to define numbers. Not sure if I'll have to define operations any way but inductively.
-- C-c C-f moves you forward to the next hole
-- C-C C-c define something by recusion
-- C-c C-r (refine) will fill in constructors if there is a unique choice.

-- We've now unlocked these 3 Pragamas to use which use the definitions of +,*, and ∸ for natural numbers. This is in addition to knowing about the natural numbers
-- Again using these buildins reduces from linear to logarithmic time by using Haskell Integers. SO use them
{-# BUILTIN NATPLUS _+_ #-}  
{-# BUILTIN NATTIMES _*_ #-}
{-# BUILTIN NATMINUS _∸_ #-}  -- use MMB to jump to definition of each operator

-- Binary representation.
-- Modified from PLFA exercise (thanks to David Darais).

data Bin-ℕ : Set where  -- effecient to use binary numbers
  bits : Bin-ℕ  -- base case constructor of type Bin-ℕ. Basically is binary 0.
  _x0 : Bin-ℕ → Bin-ℕ  -- 0 bit function, is a postfix operator which a binary number and affixes a 0
  _x1 : Bin-ℕ → Bin-ℕ  -- 1 bit function, is a postfix operator which takes a binary number and affixes a  1

-- Our representation of zero is different from PLFA.
-- We use the empty sequence of bits (more consistent).

bin-zero : Bin-ℕ
bin-zero = bits

bin-one : Bin-ℕ
bin-one = bits x1     -- 1 in binary

bin-two : Bin-ℕ
bin-two = bits x1 x0  -- 10 in binary

-- 747 exercise: Increment (1 point)
-- Define increment (add one).

inc : Bin-ℕ → Bin-ℕ
inc bits = bits x1  -- Splitting on m. This is a base case of binary 0 becoming a 1
inc (m x0) = m x1  
inc (m x1) = {!!}

-- An example/test of increment (you should create others).

_ : inc (bits x1 x0 x1 x1) ≡ bits x1 x1 x0 x0
_ = refl

-- 747 exercise: To/From (2 points)
-- Define 'tob' and 'fromb' operations
-- to convert between unary (ℕ) and binary (Bin-ℕ) notation.
-- Hint: avoid addition and multiplication,
-- and instead use the provided dbl (double) function.
-- This will make later proofs easier.
-- I've put 'b' on the end of the operations to
-- avoid a name clash in a later file.
-- It also makes the direction clear when using them.

dbl : ℕ → ℕ
dbl zero = zero
dbl (suc m) = suc (suc (dbl m))

tob : ℕ → Bin-ℕ
tob m = {!!}

fromb : Bin-ℕ → ℕ
fromb n = {!!}

-- A couple of examples/tests (you should create others).

_ : tob 6 ≡ bits x1 x1 x0
_ = refl

_ : fromb (bits x1 x1 x0) ≡ 6
_ = refl

-- 747 exercise: BinAdd (2 points)
-- Write the addition function for binary notation.
-- Do NOT use 'to' and 'from'. Work with Bin-ℕ as if ℕ did not exist.
-- Hint: use recursion on both m and n.

_bin-+_ : Bin-ℕ → Bin-ℕ → Bin-ℕ
m bin-+ n = {!!}

-- Tests can use to/from, or write out binary constants as below.
-- Again: write more tests!

_ : (bits x1 x0) bin-+ (bits x1 x1) ≡ (bits x1 x0 x1)
_ = refl

-- That's it for now, but we will return to binary notation later.

-- Many definitions from above are also in the standard library.

-- open import Data.Nat using (ℕ; zero; suc; _+_; _*_; _^_; _∸_)

-- Unicode used in this chapter:

{-
    ℕ  U+2115  DOUBLE-STRUCK CAPITAL N (\bN)
    →  U+2192  RIGHTWARDS ARROW (\to, \r, \->)
    ∸  U+2238  DOT MINUS (\.-)
    ≡  U+2261  IDENTICAL TO (\==)
    ⟨  U+27E8  MATHEMATICAL LEFT ANGLE BRACKET (\<)
    ⟩  U+27E9  MATHEMATICAL RIGHT ANGLE BRACKET (\>)
    ∎  U+220E  END OF PROOF (\qed)
-}
