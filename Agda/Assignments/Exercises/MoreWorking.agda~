{-
CAS 706 - Programming Langauges - A7
Brendan Fallon
fallonbr
November 25, 2021

Types Fully Completed
      Sums
      Empty
      Unit
      Boolean
      Lists
Types Partially Completed
      N/A
-}
-- TODO remove HIDs, TODOs, TIPs
-- add sucessfully implemented statements


module Exercises.More where

-- Libraries.

import Relation.Binary.PropositionalEquality as Eq
open Eq using (_≡_; refl)
open import Data.Empty using (⊥; ⊥-elim)
open import Data.Nat using (ℕ; zero; suc; _*_; _<_; _≤?_; z≤n; s≤s)
open import Relation.Nullary using (¬_)
open import Relation.Nullary.Decidable using (True; toWitness)
open import Data.Bool using (Bool; true; false; _∧_; _∨_; not)  -- import Agda use of Bool

-- 706 exercise: New language features (15 points)
-- Add the empty type to what is in the file More (copy everything into here first)
-- Add sum types
-- Add the unit type
-- Add the boolean type in the same style as the Nat type; implement and, or and not
-- (The rules can be found in PLFA, and also most textbooks on programming languages,
--  and various online sources)
--
-- Include examples of computations for each new feature.

-- Hint: do these one at a time.
-- For each section in the file, think whether something has to be added, and what.
-- If you add constructors to an inductive datatype, loading the file
-- will helpfully tell you what cases are missing in code using it, and where.

-- Bonus: Implement the List type

-- Tips from class:
-- Use implement bool using built-in (from Data.Bool)
-- do test-driven implemetentation, do test first to make sure it works
  -- this is so you don't implement and prove the wrong thing

-- Not too many comments, mostly following the same patterns of other types

-- Syntax. (Several of these are new.)

infix  4 _⊢_
infix  4 _∋_
infixl 5 _,_

infixr 7 _⇒_

infix  5 ƛ_
infix  5 μ_
infixl 7 _·_
infixl 8 _`*_
infix  8 `suc_
infix  9 `_
infix  9 S_
infix  9 #_

-- Followed priority from other Agda files.
-- Precedence level at 9 so most bracket before application
infixr 9 _`×_
infix  9 _`⊎_
infixr 9 _`∧_
infixr 9 _`∨_
infix  9 `not_
infixr 9 _`∷_


-- Types (fifth, sixth, and seventh are new).

data Type : Set where
  `ℕ    : Type
  _⇒_  : Type → Type → Type
  Nat   : Type
  _`×_  : Type → Type → Type
  _`⊎_  : Type → Type → Type
  `⊥    : Type
  `⊤    : Type
  `Bool  : Type
  `List_ : Type → Type

  

-- Contexts (unchanged).

data Context : Set where
  ∅   : Context
  _,_ : Context → Type → Context

-- Variables / lookup judgments (unchanged)

data _∋_ : Context → Type → Set where

  Z : ∀ {Γ A} → Γ , A ∋ A

  S_ : ∀ {Γ A B} → Γ ∋ B → Γ , A ∋ B

-- Types / type judgments
-- (additions for primitive numbers, products, empty, Boolean, unit, list )

data _⊢_ : Context → Type → Set where

  -- variables

  `_ : ∀ {Γ A} → Γ ∋ A → Γ ⊢ A

  -- functions

  ƛ_  :  ∀ {Γ A B} → Γ , A ⊢ B → Γ ⊢ A ⇒ B

  _·_ : ∀ {Γ A B} → Γ ⊢ A ⇒ B → Γ ⊢ A → Γ ⊢ B

  -- naturals

  `zero : ∀ {Γ} → Γ ⊢ `ℕ

  `suc_ : ∀ {Γ} → Γ ⊢ `ℕ → Γ ⊢ `ℕ

  case : ∀ {Γ A} → Γ ⊢ `ℕ → Γ ⊢ A → Γ , `ℕ ⊢ A → Γ ⊢ A

  -- fixpoint

  μ_ : ∀ {Γ A} → Γ , A ⊢ A → Γ ⊢ A

  -- primitive numbers

  con : ∀ {Γ} → ℕ → Γ ⊢ Nat -- TIP: here's where we encode using builtin

  _`*_ : ∀ {Γ} → Γ ⊢ Nat → Γ ⊢ Nat → Γ ⊢ Nat

  -- let

  `let : ∀ {Γ A B} → Γ ⊢ A → Γ , A ⊢ B → Γ ⊢ B

  -- products
  
  `⟨_,_⟩ : ∀ {Γ A B} → Γ ⊢ A → Γ ⊢ B → Γ ⊢ A `× B
  
  `proj₁ : ∀ {Γ A B} → Γ ⊢ A `× B → Γ ⊢ A

  `proj₂ : ∀ {Γ A B} → Γ ⊢ A `× B → Γ ⊢ B

  -- alternative formulation of products

  case× : ∀ {Γ A B C} → Γ ⊢ A `× B → Γ , A , B ⊢ C → Γ ⊢ C


  -- Sums type judgement rules

  `inj₁ : ∀ {Γ A B} → Γ ⊢ A → Γ ⊢ A `⊎ B

  `inj₂ : ∀ {Γ A B} → Γ ⊢ B → Γ ⊢ A `⊎ B

  case⊎ : ∀ {Γ A B C} → Γ ⊢ A `⊎ B → Γ , A ⊢ C → Γ , B ⊢ C
        → Γ ⊢ C

  -- empty

  case⊥ : ∀ {Γ A} → Γ ⊢ `⊥ → Γ ⊢ A

  -- unit, only introduces a value

  `tt : ∀ {Γ} → Γ ⊢ `⊤

  -- Boolean typing rules
  -- Implemented identically to primitive numbers.

  bool  : ∀ {Γ} → Bool → Γ ⊢ `Bool  -- HID: introduces a `Bool

  _`∧_  : ∀ {Γ} → Γ ⊢ `Bool → Γ ⊢ `Bool → Γ ⊢ `Bool

  _`∨_  : ∀ {Γ} → Γ ⊢ `Bool → Γ ⊢ `Bool → Γ ⊢ `Bool

  `not_ : ∀ {Γ} → Γ ⊢ `Bool → Γ ⊢ `Bool

  -- lists

  `[]   : ∀ {Γ A} → Γ ⊢ `List A

  _`∷_  : ∀ {Γ A} → Γ ⊢ A → Γ ⊢ `List A → Γ ⊢ `List A

  caseL : ∀ {Γ A B} → Γ ⊢ `List A → Γ ⊢ B → Γ , A , `List A ⊢ B
        → Γ ⊢ B
  



-- Abbreviating de Bruijn indices (unchanged)

length : Context → ℕ
length ∅        =  zero
length (Γ , _)  =  suc (length Γ)

lookup : {Γ : Context} → {n : ℕ} → (p : n < length Γ) → Type
lookup {(_ , A)} {zero}    (s≤s z≤n)  =  A
lookup {(Γ , _)} {(suc n)} (s≤s p)    =  lookup p

count : ∀ {Γ} → {n : ℕ} → (p : n < length Γ) → Γ ∋ lookup p
count {_ , _} {zero}    (s≤s z≤n)  =  Z
count {Γ , _} {(suc n)} (s≤s p)    =  S (count p)

#_ : ∀ {Γ} → (n : ℕ) → {n∈Γ : True (suc n ≤? length Γ)}
     → Γ ⊢ lookup (toWitness n∈Γ)
#_ n {n∈Γ}  =  ` count (toWitness n∈Γ)

-- Renaming (new cases in rename).

ext : ∀ {Γ Δ} → (∀ {A} → Γ ∋ A → Δ ∋ A)
    → (∀ {A B} → Γ , A ∋ B → Δ , A ∋ B)
ext ρ Z      =  Z
ext ρ (S x)  =  S (ρ x)

rename : ∀ {Γ Δ} → (∀ {A} → Γ ∋ A → Δ ∋ A) → (∀ {A} → Γ ⊢ A → Δ ⊢ A)
rename ρ (` x)          =  ` (ρ x)
rename ρ (ƛ N)          =  ƛ (rename (ext ρ) N)
rename ρ (L · M)        =  (rename ρ L) · (rename ρ M)
rename ρ (`zero)        =  `zero
rename ρ (`suc M)       =  `suc (rename ρ M)
rename ρ (case L M N)   =  case (rename ρ L) (rename ρ M) (rename (ext ρ) N)
rename ρ (μ N)          =  μ (rename (ext ρ) N)
rename ρ (con n)        =  con n
rename ρ (M `* N)       =  rename ρ M `* rename ρ N
rename ρ (`let M N)     =  `let (rename ρ M) (rename (ext ρ) N)
rename ρ `⟨ M , N ⟩     =  `⟨ rename ρ M , rename ρ N ⟩
rename ρ (`proj₁ L)     =  `proj₁ (rename ρ L)
rename ρ (`proj₂ L)     =  `proj₂ (rename ρ L)
rename ρ (case× L M)    =  case× (rename ρ L) (rename (ext (ext ρ)) M)
rename ρ (`inj₁ M)      =  `inj₁ (rename ρ M)
rename ρ (`inj₂ N)      =  `inj₂ (rename ρ N)
rename ρ (case⊎ L x y) =  case⊎ (rename ρ L) (rename (ext ρ) x) (rename (ext ρ) y)
rename ρ (case⊥ L)     =  case⊥ (rename ρ L)
rename ρ (`tt)         =  `tt
rename ρ (bool b)      = bool b
rename ρ (M `∧ N)      = (rename ρ M) `∧ (rename ρ N)
rename ρ (M `∨ N)      = (rename ρ M) `∨ (rename ρ N)
rename ρ (`not b)      = `not (rename ρ b)
rename ρ `[]           = `[]
rename ρ (M `∷ L)      = (rename ρ M) `∷ (rename ρ L)
rename ρ (caseL L M x) = caseL (rename ρ L) (rename ρ M) (rename (ext (ext ρ)) x)


-- Substitution (new cases in subst).

exts : ∀ {Γ Δ} → (∀ {A} → Γ ∋ A → Δ ⊢ A) → (∀ {A B} → Γ , A ∋ B → Δ , A ⊢ B)
exts σ Z      =  ` Z
exts σ (S x)  =  rename S_ (σ x)

subst : ∀ {Γ Δ} → (∀ {C} → Γ ∋ C → Δ ⊢ C) → (∀ {C} → Γ ⊢ C → Δ ⊢ C)
subst σ (` k)          =  σ k
subst σ (ƛ N)          =  ƛ (subst (exts σ) N)
subst σ (L · M)        =  (subst σ L) · (subst σ M)
subst σ (`zero)        =  `zero
subst σ (`suc M)       =  `suc (subst σ M)
subst σ (case L M N)   =  case (subst σ L) (subst σ M) (subst (exts σ) N)
subst σ (μ N)          =  μ (subst (exts σ) N)
subst σ (con n)        =  con n
subst σ (M `* N)       =  subst σ M `* subst σ N
subst σ (`let M N)     =  `let (subst σ M) (subst (exts σ) N)
subst σ `⟨ M , N ⟩     =  `⟨ subst σ M , subst σ N ⟩
subst σ (`proj₁ L)     =  `proj₁ (subst σ L)
subst σ (`proj₂ L)     =  `proj₂ (subst σ L)
subst σ (case× L M)    =  case× (subst σ L) (subst (exts (exts σ)) M)
subst σ (`inj₁ M)      = `inj₁ (subst σ M)
subst σ (`inj₂ N)      = `inj₂ (subst σ N)
subst σ (case⊎ L x y) = case⊎ (subst σ L) (subst (exts σ) x) (subst (exts σ) y)
subst σ (case⊥ L)     = case⊥ (subst σ L)
subst σ `tt           = `tt
subst σ (bool b)      = bool b
subst σ (M `∧ N)      = (subst σ M) `∧ (subst σ N)
subst σ (M `∨ N)      = (subst σ M) `∨ (subst σ N)
subst σ (`not b)      = `not (subst σ b)
subst σ `[]           = `[]
subst σ (M `∷ L)      = (subst σ M) `∷ (subst σ L)
subst σ (caseL M L x) = caseL (subst σ M) (subst σ L) (subst (exts (exts σ)) x)




-- Single substitution (unchanged)

_[_] : ∀ {Γ A B} → Γ , A ⊢ B → Γ ⊢ A → Γ ⊢ B

_[_] {Γ} {A} N V =  subst {Γ , A} {Γ} σ N
  where
  σ : ∀ {B} → Γ , A ∋ B → Γ ⊢ B
  σ Z      =  V
  σ (S x)  =  ` x

-- Double substitution (needed for alternative product)

_[_][_] : ∀ {Γ A B C} → Γ , A , B ⊢ C → Γ ⊢ A → Γ ⊢ B → Γ ⊢ C
_[_][_] {Γ} {A} {B} N V W =  subst {Γ , A , B} {Γ} σ N
  where
  σ : ∀ {C} → Γ , A , B ∋ C → Γ ⊢ C
  σ Z          =  W
  σ (S Z)      =  V
  σ (S (S x))  =  ` x

-- Values (additions for primitive numbers, products, sums)

data Value : ∀ {Γ A} → Γ ⊢ A → Set where

  -- functions

  V-ƛ : ∀ {Γ A B} {N : Γ , A ⊢ B} → Value (ƛ N)

  -- naturals

  V-zero : ∀ {Γ} → Value (`zero {Γ})

  V-suc_ : ∀ {Γ} {V : Γ ⊢ `ℕ} → Value V → Value (`suc V)

  -- primitives

  V-con : ∀ {Γ n} → Value {Γ = Γ} (con n)

  -- products

  V-⟨_,_⟩ : ∀ {Γ A B} {V : Γ ⊢ A} {W : Γ ⊢ B} → Value V → Value W
    → Value `⟨ V , W ⟩

  -- sums values

  V-inj₁_ : ∀ {Γ A B} {V : Γ ⊢ A} → Value V → Value (`inj₁ {B = B} V)

  V-inj₂_ : ∀ {Γ A B} {W : Γ ⊢ B} → Value W → Value (`inj₂ {A = A} W)

  -- unit, is just a value

  V-tt   : ∀ {Γ} → Value {Γ = Γ} `tt

  -- Booleans

  V-bool : ∀ {Γ b} → Value {Γ = Γ} (bool b)

  -- lists

  V-[]   : ∀ {Γ A} → Value {Γ = Γ} {A = `List A} `[]

  V-_`∷_ : ∀ {Γ A} {V : Γ ⊢ A} {W : Γ ⊢ `List A}
         → Value V → Value W → Value (V `∷ W)


-- Reduction (additions for all new features).

infix 2 _—→_

data _—→_ : ∀ {Γ A} → (Γ ⊢ A) → (Γ ⊢ A) → Set where

  -- functions

  ξ-·₁ : ∀ {Γ A B} {L L′ : Γ ⊢ A ⇒ B} {M : Γ ⊢ A}
    → L —→ L′ → L · M —→ L′ · M

  ξ-·₂ : ∀ {Γ A B} {V : Γ ⊢ A ⇒ B} {M M′ : Γ ⊢ A}
    → Value V → M —→ M′ → V · M —→ V · M′

  β-ƛ : ∀ {Γ A B} {N : Γ , A ⊢ B} {V : Γ ⊢ A}
    → Value V → (ƛ N) · V —→ N [ V ]

  -- naturals

  ξ-suc : ∀ {Γ} {M M′ : Γ ⊢ `ℕ}
    → M —→ M′ → `suc M —→ `suc M′

  ξ-case : ∀ {Γ A} {L L′ : Γ ⊢ `ℕ} {M : Γ ⊢ A} {N : Γ , `ℕ ⊢ A}
    → L —→ L′ → case L M N —→ case L′ M N

  β-zero :  ∀ {Γ A} {M : Γ ⊢ A} {N : Γ , `ℕ ⊢ A}
      -------------------
    → case `zero M N —→ M

  β-suc : ∀ {Γ A} {V : Γ ⊢ `ℕ} {M : Γ ⊢ A} {N : Γ , `ℕ ⊢ A}
    → Value V → case (`suc V) M N —→ N [ V ]

  -- fixpoint

  β-μ : ∀ {Γ A} {N : Γ , A ⊢ A} → μ N —→ N [ μ N ]

  -- primitive numbers

  ξ-*₁ : ∀ {Γ} {L L′ M : Γ ⊢ Nat}
    → L —→ L′ → L `* M —→ L′ `* M

  ξ-*₂ : ∀ {Γ} {V M M′ : Γ ⊢ Nat}
    → Value V → M —→ M′ → V `* M —→ V `* M′

  δ-* : ∀ {Γ c d} → con {Γ = Γ} c `* con d —→ con (c * d)

  -- let

  ξ-let : ∀ {Γ A B} {M M′ : Γ ⊢ A} {N : Γ , A ⊢ B}
    → M —→ M′ → `let M N —→ `let M′ N

  β-let : ∀ {Γ A B} {V : Γ ⊢ A} {N : Γ , A ⊢ B}
    → Value V → `let V N —→ N [ V ]

  -- products

  ξ-⟨,⟩₁ : ∀ {Γ A B} {M M′ : Γ ⊢ A} {N : Γ ⊢ B}
    → M —→ M′ → `⟨ M , N ⟩ —→ `⟨ M′ , N ⟩

  ξ-⟨,⟩₂ : ∀ {Γ A B} {V : Γ ⊢ A} {N N′ : Γ ⊢ B}
    → Value V → N —→ N′ → `⟨ V , N ⟩ —→ `⟨ V , N′ ⟩

  ξ-proj₁ : ∀ {Γ A B} {L L′ : Γ ⊢ A `× B}
    → L —→ L′ → `proj₁ L —→ `proj₁ L′

  ξ-proj₂ : ∀ {Γ A B} {L L′ : Γ ⊢ A `× B}
    → L —→ L′ → `proj₂ L —→ `proj₂ L′

  β-proj₁ : ∀ {Γ A B} {V : Γ ⊢ A} {W : Γ ⊢ B}
    → Value V → Value W → `proj₁ `⟨ V , W ⟩ —→ V

  β-proj₂ : ∀ {Γ A B} {V : Γ ⊢ A} {W : Γ ⊢ B}
    → Value V → Value W → `proj₂ `⟨ V , W ⟩ —→ W

  -- alternative formulation of products

  ξ-case× : ∀ {Γ A B C} {L L′ : Γ ⊢ A `× B} {M : Γ , A , B ⊢ C}
    → L —→ L′ → case× L M —→ case× L′ M

  β-case× : ∀ {Γ A B C} {V : Γ ⊢ A} {W : Γ ⊢ B} {M : Γ , A , B ⊢ C}
    → Value V → Value W → case× `⟨ V , W ⟩ M —→ M [ V ][ W ]

  -- sums reduction rules

  ξ-inj₁ : ∀ {Γ A B} {M M′ : Γ ⊢ A} → M —→ M′ → `inj₁ {B = B} M —→ `inj₁ M′

  ξ-inj₂ : ∀ {Γ A B} {N N′ : Γ ⊢ B} → N —→ N′ → `inj₂ {A = A} N —→ `inj₂ N′

  ξ-case⊎ : ∀ {Γ A B C} {L L′ : Γ ⊢ A `⊎ B} {M : Γ , A ⊢ C}
          {N : Γ , B ⊢ C} → L —→ L′ → case⊎ L M N —→ case⊎ L′ M N

  β-inj₁ : ∀ {Γ A B C} {V : Γ ⊢ A} {M : Γ , A ⊢ C} {N : Γ , B ⊢ C}
         → Value V → case⊎ (`inj₁ V) M N —→ M [ V ]

  β-inj₂ : ∀ {Γ A B C} {W : Γ ⊢ B} {M : Γ , A ⊢ C} {N : Γ , B ⊢ C}
         → Value W → case⊎ (`inj₂ W) M N —→ N [ W ]

  -- empty

  ξ-case⊥ : ∀ {Γ A} {L L′ : Γ ⊢ `⊥} → L —→ L′
          → case⊥ {A = A} L —→ case⊥ L′

  -- Boolean reduction rules
  -- Following form of primitive numbers, using built-in Bool

  ξ-∧₁ : ∀ {Γ} {L L′ M : Γ ⊢ `Bool} → L —→ L′ → L `∧ M —→ L′ `∧ M

  ξ-∧₂ : ∀ {Γ} {V M M′ : Γ ⊢ `Bool} → Value V → M —→ M′ → V `∧ M —→ V `∧ M′

  δ-∧ : ∀ {Γ c d} → bool {Γ = Γ} c `∧ bool d —→ bool (c ∧ d)

  ξ-∨₁ : ∀ {Γ} {L L′ M : Γ ⊢ `Bool} → L —→ L′ → L `∨ M —→ L′ `∨ M

  ξ-∨₂ : ∀ {Γ} {V M M′ : Γ ⊢ `Bool} → Value V → M —→ M′ → V `∨ M —→ V `∨ M′

  δ-∨ : ∀ {Γ c d} → bool {Γ = Γ} c `∨ bool d —→ bool (c ∨ d)

  ξ-not : ∀ {Γ} {L L′ : Γ ⊢ `Bool} → L —→ L′ → `not L —→ `not L′ 

  δ-not : ∀ {Γ b} → `not (bool {Γ = Γ} b)  —→ bool (not b)

  -- lists

  ξ-∷₁ : ∀ {Γ A} {M M′ : Γ ⊢ A} {N : Γ ⊢ `List A}
       → M —→ M′ → M `∷ N  —→ M′ `∷ N

  ξ-∷₂ : ∀ {Γ A} {V : Γ ⊢ A} {N N′ : Γ ⊢ `List A} → Value V
       → N —→ N′ → V `∷ N  —→ V `∷ N′

  ξ-caseL : ∀ {Γ A B} {L L′ : Γ ⊢ `List A} {M : Γ ⊢ B } {N : Γ , A , `List A ⊢ B }
          → L —→ L′  → caseL L M N —→ caseL L′ M N

  β-[] : ∀ {Γ A B} {M : Γ ⊢ B } {N : Γ , A , `List A ⊢ B }
          → caseL `[] M N —→ M

  β-∷  : ∀ {Γ A B} {V : Γ ⊢ A} {W : Γ ⊢ `List A} {M : Γ ⊢ B } {N : Γ , A , `List A ⊢ B }
    → Value V → Value W → caseL (V `∷ W) M N —→ N [ V ][ W ]



-- Reflexive/transitive closure (unchanged).

infix  2 _—↠_
infix  1 begin_
infixr 2 _—→⟨_⟩_
infix  3 _∎

data _—↠_ {Γ A} : (Γ ⊢ A) → (Γ ⊢ A) → Set where

  _∎ : (M : Γ ⊢ A) → M —↠ M

  _—→⟨_⟩_ : (L : Γ ⊢ A) {M N : Γ ⊢ A}
    → L —→ M → M —↠ N → L —↠ N

begin_ : ∀ {Γ A} {M N : Γ ⊢ A}
  → M —↠ N → M —↠ N
begin M—↠N = M—↠N

-- Values do not reduce (new cases for products, sums, lists).

V¬—→ : ∀ {Γ A} {M N : Γ ⊢ A} → Value M → ¬ (M —→ N)
V¬—→ (V-suc VM) (ξ-suc M—→M′)     =  V¬—→ VM M—→M′
V¬—→ V-⟨ VM , _ ⟩ (ξ-⟨,⟩₁ M—→M′)    =  V¬—→ VM M—→M′
V¬—→ V-⟨ _ , VN ⟩ (ξ-⟨,⟩₂ _ N—→N′)  =  V¬—→ VN N—→N′
V¬—→ (V-inj₁ VV) (ξ-inj₁ V—→M′) = V¬—→ VV V—→M′
V¬—→ (V-inj₂ VW) (ξ-inj₂ W—→N′) = V¬—→ VW W—→N′
V¬—→ (V- VV `∷ VW) (ξ-∷₁ V—→M′ ) = V¬—→ VV V—→M′
V¬—→ (V- VV₁ `∷ VW) (ξ-∷₂ VV₂ W—→N′) = V¬—→ VW W—→N′


-- Progress (new cases in theorem).

data Progress {A} (M : ∅ ⊢ A) : Set where

  step : ∀ {N : ∅ ⊢ A} → M —→ N → Progress M

  done : Value M → Progress M

progress : ∀ {A} → (M : ∅ ⊢ A) → Progress M
progress (ƛ N)                     =  done V-ƛ
progress (L · M) with progress L
...    | step L—→L′               =  step (ξ-·₁ L—→L′)
...    | done V-ƛ with progress M
...        | step M—→M′           =  step (ξ-·₂ V-ƛ M—→M′)
...        | done VM               =  step (β-ƛ VM)
progress (`zero)                   =  done V-zero
progress (`suc M) with progress M
...    | step M—→M′               =  step (ξ-suc M—→M′)
...    | done VM                   =  done (V-suc VM)
progress (case L M N) with progress L
...    | step L—→L′               =  step (ξ-case L—→L′)
...    | done V-zero              =  step β-zero
...    | done (V-suc VL)          =  step (β-suc VL)
progress (μ N)                    =  step β-μ
progress (con n)                  =  done V-con
progress (L `* M) with progress L
...    | step L—→L′              =  step (ξ-*₁ L—→L′)
...    | done V-con with progress M
...        | step M—→M′          =  step (ξ-*₂ V-con M—→M′)
...        | done V-con           =  step δ-*
progress (`let M N) with progress M
...    | step M—→M′              =  step (ξ-let M—→M′)
...    | done VM                  =  step (β-let VM)
progress `⟨ M , N ⟩ with progress M
...    | step M—→M′              =  step (ξ-⟨,⟩₁ M—→M′)
...    | done VM with progress N
...        | step N—→N′          =  step (ξ-⟨,⟩₂ VM N—→N′)
...        | done VN              =  done (V-⟨ VM , VN ⟩)
progress (`proj₁ L) with progress L
...    | step L—→L′              =  step (ξ-proj₁ L—→L′)
...    | done (V-⟨ VM , VN ⟩)    =  step (β-proj₁ VM VN)
progress (`proj₂ L) with progress L
...    | step L—→L′             =  step (ξ-proj₂ L—→L′)
...    | done (V-⟨ VM , VN ⟩)    =  step (β-proj₂ VM VN)
progress (case× L M) with progress L
...    | step L—→L′              =  step (ξ-case× L—→L′)
...    | done (V-⟨ VM , VN ⟩)    =  step (β-case× VM VN)
progress (`inj₁ M) with progress M
...    | step M—→M′              =  step (ξ-inj₁ M—→M′)
...    | done VM                  =  done (V-inj₁ VM) 
progress (`inj₂ N) with progress N
...    | step N—→N′              =  step (ξ-inj₂ N—→N′)
...    | done VN                 =  done (V-inj₂ VN)
progress (case⊎ L x y) with progress L
...    | step L—→L′              =  step (ξ-case⊎ L—→L′)
...    | done (V-inj₁ V)          = step (β-inj₁ V)  
...    | done (V-inj₂ W)          = step (β-inj₂ W)
progress (case⊥ L) with progress L  -- no version of done b.c. no value for `⊥
...    | step L—→L′              = step (ξ-case⊥ L—→L′)
progress `tt                      = done V-tt
progress (bool B)                 = done V-bool
progress (L `∧ M) with progress L
...    | step L—→L′              =  step (ξ-∧₁ L—→L′)
...    | done V-bool with progress M
...        | step M—→M′          =  step (ξ-∧₂ V-bool M—→M′)
...        | done V-bool          =  step δ-∧
progress (L `∨ M) with progress L
...    | step L—→L′              =  step (ξ-∨₁ L—→L′)
...    | done V-bool with progress M
...        | step M—→M′          =  step (ξ-∨₂ V-bool M—→M′)
...        | done V-bool          =  step δ-∨
progress (`not L) with progress L
...    | step L—→L′              = step (ξ-not L—→L′)
...    | done V-bool              = step δ-not
progress `[]                      = done V-[]
progress (M `∷ L) with progress M
...    | step M—→M′              =  step (ξ-∷₁ M—→M′)
...    | done VM with progress L
...        | step L—→L′          =  step (ξ-∷₂ VM L—→L′)
...        | done VL              =  done (V- VM `∷ VL)
progress (caseL M L x) with progress M
...    | step L—→L′              = step (ξ-caseL L—→L′)
...    | done V-[]                = step β-[]
...    | done (V- VV `∷ VW)      = step (β-∷ VV VW)

-- TIP: remember same amount of steps as reduction rules + values
-- TIP: either steps on left, steps on right, or is done (value)


-- Evaluation (unchanged).

record Gas : Set where
  constructor gas
  field
    amount : ℕ

data Finished {Γ A} (N : Γ ⊢ A) : Set where

   done : Value N → Finished N

   out-of-gas : Finished N


data Steps {A} : ∅ ⊢ A → Set where

  steps : {L N : ∅ ⊢ A} → L —↠ N → Finished N → Steps L

eval : ∀ {A} → Gas → (L : ∅ ⊢ A) → Steps L
eval (gas zero)    L                     =  steps (L ∎) out-of-gas
eval (gas (suc m)) L with progress L
... | done VL                            =  steps (L ∎) (done VL)
... | step {M} L—→M with eval (gas m) M
...    | steps M—↠N fin                  =  steps (L —→⟨ L—→M ⟩ M—↠N) fin


-- Primitive number tests

cube : ∅ ⊢ Nat ⇒ Nat
cube = ƛ (# 0 `* # 0 `* # 0)

_ : cube · con 2 —↠ con 8
_ = begin
    cube · con 2             —→⟨ β-ƛ V-con ⟩
    con 2 `* con 2 `* con 2  —→⟨ ξ-*₁ δ-* ⟩
    con 4 `* con 2           —→⟨ δ-* ⟩
    con 8                    ∎

exp10 : ∅ ⊢ Nat ⇒ Nat
exp10 = ƛ (`let (# 0 `* # 0)
            (`let (# 0 `* # 0)
              (`let (# 0 `* # 2)
                (# 0 `* # 0))))

_ : exp10 · con 2 —↠ con 1024
_ = begin
    exp10 · con 2                                                                —→⟨ β-ƛ V-con ⟩
    `let (con 2 `* con 2) (`let (# 0 `* # 0) (`let (# 0 `* con 2) (# 0 `* # 0))) —→⟨ ξ-let δ-* ⟩
    `let (con 4) (`let (# 0 `* # 0) (`let (# 0 `* con 2) (# 0 `* # 0)))          —→⟨ β-let V-con ⟩
    `let (con 4 `* con 4) (`let (# 0 `* con 2) (# 0 `* # 0))                     —→⟨ ξ-let δ-* ⟩
    `let (con 16) (`let (# 0 `* con 2) (# 0 `* # 0))                             —→⟨ β-let V-con ⟩
    `let (con 16 `* con 2) (# 0 `* # 0)                                          —→⟨ ξ-let δ-* ⟩
    `let (con 32) (# 0 `* # 0)                                                   —→⟨ β-let V-con ⟩
    con 32 `* con 32                                                             —→⟨ δ-* ⟩
    con 1024                                                                     ∎

-- Product Tests

swap× : ∀ {A B} → ∅ ⊢ A `× B ⇒ B `× A
swap× = ƛ `⟨ `proj₂ (# 0) , `proj₁ (# 0) ⟩

_ : swap× · `⟨ con 42 , `zero ⟩ —↠ `⟨ `zero , con 42 ⟩
_ = begin
    swap× · `⟨ con 42 , `zero ⟩                                   —→⟨ β-ƛ V-⟨ V-con , V-zero ⟩ ⟩
    `⟨ `proj₂ `⟨ con 42 , `zero ⟩ , `proj₁ `⟨ con 42 , `zero ⟩ ⟩  —→⟨ ξ-⟨,⟩₁ (β-proj₂ V-con V-zero) ⟩
    `⟨ `zero , `proj₁ `⟨ con 42 , `zero ⟩ ⟩                       —→⟨ ξ-⟨,⟩₂ V-zero (β-proj₁ V-con V-zero) ⟩
    `⟨ `zero , con 42 ⟩                                           ∎

swap×-case : ∀ {A B} → ∅ ⊢ A `× B ⇒ B `× A
swap×-case = ƛ case× (# 0) `⟨ # 0 , # 1 ⟩

_ : swap×-case · `⟨ con 42 , `zero ⟩ —↠ `⟨ `zero , con 42 ⟩
_ = begin
    swap×-case · `⟨ con 42 , `zero ⟩           —→⟨ β-ƛ V-⟨ V-con , V-zero ⟩ ⟩
    case× `⟨ con 42 , `zero ⟩ `⟨ # 0 , # 1 ⟩  —→⟨ β-case× V-con V-zero ⟩
    `⟨ `zero , con 42 ⟩                       ∎


-- Sum Tests


swap⊎ : ∀ {A B} → ∅ ⊢ A `⊎ B ⇒ B `⊎ A
swap⊎ {B} = ƛ case⊎ (# 0) (`inj₂ (# 0)) (`inj₁ (# 0))


-- had to name tests as proof to introduce immplicit varaibles A/B

testswap1 : ∀ {B} → swap⊎  · `inj₁ (con 42) —↠ `inj₂ (con 42)
testswap1 {B} = begin
    swap⊎ · `inj₁ (con 42)                              —→⟨ β-ƛ (V-inj₁ V-con) ⟩
    case⊎ (`inj₁ {B = B} (con 42)) (`inj₂ (# 0)) (`inj₁ (# 0)) —→⟨ β-inj₁ V-con ⟩  
    `inj₂ (con 42)                                      ∎


testswap2 : ∀ {A} → swap⊎ · `inj₂ `zero —↠ `inj₁ `zero
testswap2 {A} = begin
    swap⊎ · `inj₂ `zero                                     —→⟨ β-ƛ (V-inj₂ V-zero)  ⟩
    case⊎ (`inj₂ {A = A} `zero) (`inj₂ (# 0)) (`inj₁ (# 0)) —→⟨ β-inj₂ V-zero ⟩
    `inj₁ `zero                                             ∎


-- Empty Tests

-- ⊥ is the sum type "0"

to⊎⊥ : ∀ {A} → ∅ ⊢ A ⇒ A `⊎ `⊥
to⊎⊥ = ƛ `inj₁ (# 0)

_ : to⊎⊥ · `zero —↠ `inj₁ `zero
_ = begin
    to⊎⊥ · `zero —→⟨ β-ƛ V-zero  ⟩
    `inj₁ `zero   ∎


from⊎⊥ : ∀ {A} → ∅ ⊢ A `⊎ `⊥ ⇒ A
from⊎⊥ = ƛ case⊎ (# 0) (# 0) (case⊥ (# 0))

_ : from⊎⊥ · (`inj₁ (con 42))  —↠  con 42
_ = begin
    from⊎⊥ · (`inj₁ (con 42))                   —→⟨ β-ƛ (V-inj₁ V-con) ⟩
    case⊎ (`inj₁ (con 42)) (# 0) (case⊥ (# 0))  —→⟨ β-inj₁ V-con ⟩
    con 42                                       ∎


-- Unit Tests

-- top is the product type "1"

to×⊤ : ∀ {A} → ∅ ⊢ A ⇒ A `× `⊤
to×⊤ = ƛ `⟨ (# 0) , `tt ⟩

_ : to×⊤ · (con 42) —↠ `⟨ (con 42) , `tt ⟩
_ = begin
    to×⊤ · (con 42)     —→⟨ β-ƛ V-con  ⟩
    `⟨ (con 42) , `tt ⟩ ∎


from×⊤ : ∀ {A} → ∅ ⊢ A `× `⊤ ⇒ A
from×⊤ = ƛ `proj₁ (# 0)

_ : from×⊤ · `⟨ `zero , `tt ⟩ —↠ `zero
_ = begin
    from×⊤ · `⟨ `zero , `tt ⟩ —→⟨ β-ƛ V-⟨ V-zero , V-tt ⟩ ⟩
    `proj₁ `⟨ `zero , `tt ⟩   —→⟨ β-proj₁ V-zero V-tt ⟩
    `zero                     ∎


-- Boolean Tests

-- test AND/OR/NOT

AND : ∅ ⊢ `Bool ⇒ `Bool ⇒ `Bool
AND = ƛ (ƛ  (# 0) `∧ (# 1))

-- I'll be honest I didn't know how to double currying reduction
  -- so I used the evaluator to show me the steps. Very handy.
  
{- commented out to run faster
_ : eval (gas 5) (AND · (bool true) · (bool false) ) ≡ steps
  ((ƛ (ƛ (` Z) `∧ (` (S Z)))) · bool true · bool false —→⟨ ξ-·₁ (β-ƛ V-bool) ⟩
  (ƛ (` Z) `∧ bool true) · bool false                  —→⟨ β-ƛ V-bool ⟩
  bool false `∧ bool true                              —→⟨ δ-∧ ⟩
  bool false                                           ∎   )
 (done V-bool)
_ = refl
-}

_ : AND · (bool true) · (bool false) —↠ bool false
_ = begin
    AND · bool true · bool false         —→⟨ ξ-·₁ (β-ƛ V-bool) ⟩
    (ƛ (# 0) `∧ bool true) · bool false  —→⟨ β-ƛ V-bool ⟩
    bool false `∧ bool true              —→⟨ δ-∧ ⟩
    bool false                           ∎

OR : ∅ ⊢ `Bool ⇒ `Bool ⇒ `Bool
OR = ƛ (ƛ  (# 0) `∨ (# 1))

_ : OR · (bool false) · (bool true)  —↠ bool true
_ = begin
    OR · bool false · bool true           —→⟨ ξ-·₁ (β-ƛ V-bool) ⟩
    (ƛ (# 0) `∨ bool false) · bool true   —→⟨ β-ƛ V-bool ⟩
    bool true `∨ bool false               —→⟨ δ-∨ ⟩
    bool true                             ∎

NOT : ∅ ⊢ `Bool ⇒ `Bool
NOT = ƛ `not (# 0)

_ : NOT · (bool false)  —↠ bool true
_ = begin
    NOT · bool false —→⟨ β-ƛ V-bool ⟩
    `not bool false  —→⟨ δ-not ⟩
    bool true        ∎


-- List tests

mapL : ∀ {A B} → ∅ ⊢ (A ⇒ B) ⇒ `List A ⇒ `List B
mapL = μ (ƛ (ƛ caseL (# 0) `[] ((((# 3)  · (# 1)) `∷ ((# 4) · (# 3) · (# 0) )))))

-- HID: tried to parse context to get and fit the requirements
   -- took A LOT of trial an error, maybe an hour haha but it works


-- again using evaluator to derive steps, not included to save space

-- _ : eval (gas 12) (mapL · cube · ( (con 2) `∷ `[] ) ) ≡ ?
-- _ = refl

_ : mapL · cube · ( (con 2) `∷ `[] ) —↠   (con 8) `∷ `[] 
_ = begin
    (μ (ƛ (ƛ caseL (` Z) `[] ((` (S (S (S Z)) ) · ` (S Z)) `∷ (` (S (S (S (S Z)))) · ` (S (S (S Z))) · ` Z))))) · (ƛ ` Z `* ` Z `* ` Z) · con 2 `∷ `[] —→⟨ ξ-·₁ (ξ-·₁ β-μ) ⟩
    (ƛ (ƛ caseL (` Z) `[] ((` (S (S (S Z))) · ` (S Z)) `∷ ((μ (ƛ (ƛ caseL (` Z) `[] ((` (S (S (S Z))) · ` (S Z)) `∷ (` (S (S (S (S Z)))) · ` (S (S (S Z))) · ` Z))))) · ` (S (S (S Z))) · ` Z)))) · (ƛ ` Z `* ` Z `* ` Z) · con 2 `∷ `[] —→⟨ ξ-·₁ (β-ƛ V-ƛ) ⟩
    (ƛ caseL (` Z) `[] (((ƛ ` Z `* ` Z `* ` Z) · ` (S Z)) `∷ ((μ (ƛ (ƛ caseL (` Z) `[] ((` (S (S (S Z))) · ` (S Z)) `∷ (` (S (S (S (S Z)))) · ` (S (S (S Z))) · ` Z))))) · (ƛ ` Z `* ` Z `* ` Z) · ` Z))) · con 2 `∷ `[] —→⟨ β-ƛ (V- V-con `∷ V-[]) ⟩
    caseL (con 2 `∷ `[]) `[] (((ƛ ` Z `* ` Z `* ` Z) · ` (S Z)) `∷ ((μ (ƛ (ƛ caseL (` Z) `[] ((` (S (S (S Z))) · ` (S Z)) `∷ (` (S (S (S (S Z)))) · ` (S (S (S Z))) · ` Z))))) · (ƛ ` Z `* ` Z `* ` Z) · ` Z)) —→⟨ β-∷ V-con V-[] ⟩
    ((ƛ ` Z `* ` Z `* ` Z) · con 2) `∷ ((μ (ƛ (ƛ caseL (` Z) `[] ((` (S (S (S Z))) · ` (S Z)) `∷ (` (S (S (S (S Z)))) · ` (S (S (S Z))) · ` Z))))) · (ƛ ` Z `* ` Z `* ` Z) · `[]) —→⟨ ξ-∷₁ (β-ƛ V-con) ⟩
    (con 2 `* con 2 `* con 2) `∷ ((μ (ƛ (ƛ caseL (` Z) `[] ((` (S (S (S Z))) · ` (S Z)) `∷ (` (S (S (S (S Z)))) · ` (S (S (S Z))) · ` Z))))) · (ƛ ` Z `* ` Z `* ` Z) · `[]) —→⟨ ξ-∷₁ (ξ-*₁ δ-*) ⟩
    (con 4 `* con 2) `∷ ((μ (ƛ (ƛ caseL (` Z) `[] ((` (S (S (S Z))) · ` (S Z)) `∷ (` (S (S (S (S Z)))) · ` (S (S (S Z))) · ` Z))))) · (ƛ ` Z `* ` Z `* ` Z) · `[]) —→⟨ ξ-∷₁ δ-* ⟩
    con 8 `∷ ((μ (ƛ (ƛ caseL (` Z) `[] ((` (S (S (S Z))) · ` (S Z)) `∷ (` (S (S (S (S Z)))) · ` (S (S (S Z))) · ` Z))))) · (ƛ ` Z `* ` Z `* ` Z) · `[]) —→⟨ ξ-∷₂ V-con (ξ-·₁ (ξ-·₁ β-μ)) ⟩
    con 8 `∷ ((ƛ (ƛ caseL (` Z) `[] ((` (S (S (S Z))) · ` (S Z)) `∷ ((μ (ƛ (ƛ caseL (` Z) `[] ((` (S (S (S Z))) · ` (S Z)) `∷ (` (S (S (S (S Z)))) · ` (S (S (S Z))) · ` Z))))) · ` (S (S (S Z))) · ` Z)))) · (ƛ ` Z `* ` Z `* ` Z) · `[]) —→⟨ ξ-∷₂ V-con (ξ-·₁ (β-ƛ V-ƛ)) ⟩
    con 8 `∷ ((ƛ caseL (` Z) `[] (((ƛ ` Z `* ` Z `* ` Z) · ` (S Z)) `∷ ((μ (ƛ (ƛ caseL (` Z) `[] ((` (S (S (S Z))) · ` (S Z)) `∷ (` (S (S (S (S Z)))) · ` (S (S (S Z))) · ` Z))))) · (ƛ ` Z `* ` Z `* ` Z) · ` Z))) · `[]) —→⟨ ξ-∷₂ V-con (β-ƛ V-[]) ⟩
    con 8 `∷ caseL `[] `[] (((ƛ ` Z `* ` Z `* ` Z) · ` (S Z)) `∷ ((μ (ƛ (ƛ caseL (` Z) `[] ((` (S (S (S Z))) · ` (S Z)) `∷ (` (S (S (S (S Z)))) · ` (S (S (S Z))) · ` Z))))) · (ƛ ` Z `* ` Z `* ` Z) · ` Z)) —→⟨ ξ-∷₂ V-con β-[] ⟩
    con 8 `∷ `[] ∎

-- final example using evaluator to derive steps, not included to save space

-- _ : eval (gas 11) (mapL · NOT · ( (bool true) `∷ `[] )) ≡ ?
-- _ = refl

_ : mapL · NOT · ( (bool true) `∷ `[] ) —↠ (bool false) `∷ `[]
_ =
  begin
    (μ (ƛ (ƛ caseL (` Z) `[] ((` (S (S (S Z))) · ` (S Z)) `∷ (` (S (S (S (S Z)))) · ` (S (S (S Z))) · ` Z))))) · (ƛ `not (` Z)) · bool true `∷ `[] —→⟨ ξ-·₁ (ξ-·₁ β-μ) ⟩
    (ƛ (ƛ caseL (` Z) `[] ((` (S (S (S Z))) · ` (S Z)) `∷ ((μ (ƛ (ƛ caseL (` Z) `[] ((` (S (S (S Z))) · ` (S Z)) `∷ (` (S (S (S (S Z)))) · ` (S (S (S Z))) · ` Z))))) · ` (S (S (S Z))) · ` Z)))) · (ƛ `not (` Z)) · bool true `∷ `[] —→⟨ ξ-·₁ (β-ƛ V-ƛ) ⟩
    (ƛ caseL (` Z) `[] (((ƛ `not (` Z)) · ` (S Z)) `∷ ((μ (ƛ (ƛ caseL (` Z) `[] ((` (S (S (S Z))) · ` (S Z)) `∷ (` (S (S (S (S Z)))) · ` (S (S (S Z))) · ` Z))))) · (ƛ `not (` Z)) · ` Z))) · bool true `∷ `[] —→⟨ β-ƛ (V- V-bool `∷ V-[]) ⟩
    caseL (bool true `∷ `[]) `[] (((ƛ `not (` Z)) · ` (S Z)) `∷ ((μ (ƛ (ƛ caseL (` Z) `[] ((` (S (S (S Z))) · ` (S Z)) `∷ (` (S (S (S (S Z)))) · ` (S (S (S Z))) · ` Z))))) · (ƛ `not (` Z)) · ` Z)) —→⟨ β-∷ V-bool V-[] ⟩
    ((ƛ `not (` Z)) · bool true) `∷ ((μ (ƛ (ƛ caseL (` Z) `[] ((` (S (S (S Z))) · ` (S Z)) `∷ (` (S (S (S (S Z)))) · ` (S (S (S Z))) · ` Z))))) · (ƛ `not (` Z)) · `[]) —→⟨ ξ-∷₁ (β-ƛ V-bool) ⟩
    (`not bool true) `∷ ((μ (ƛ (ƛ caseL (` Z) `[] ((` (S (S (S Z))) · ` (S Z)) `∷ (` (S (S (S (S Z)))) · ` (S (S (S Z))) · ` Z))))) · (ƛ `not (` Z)) · `[]) —→⟨ ξ-∷₁ δ-not ⟩
    bool false `∷ ((μ (ƛ (ƛ caseL (` Z) `[] ((` (S (S (S Z))) · ` (S Z)) `∷ (` (S (S (S (S Z)))) · ` (S (S (S Z))) · ` Z))))) · (ƛ `not (` Z)) · `[]) —→⟨ ξ-∷₂ V-bool (ξ-·₁ (ξ-·₁ β-μ)) ⟩ bool false `∷ ((ƛ (ƛ caseL (` Z) `[] ((` (S (S (S Z))) · ` (S Z)) `∷ ((μ (ƛ (ƛ caseL (` Z) `[] ((` (S (S (S Z))) · ` (S Z)) `∷ (` (S (S (S (S Z)))) · ` (S (S (S Z))) · ` Z))))) · ` (S (S (S Z))) · ` Z)))) · (ƛ `not (` Z)) · `[]) —→⟨ ξ-∷₂ V-bool (ξ-·₁ (β-ƛ V-ƛ)) ⟩
    bool false `∷ ((ƛ caseL (` Z) `[] (((ƛ `not (` Z)) · ` (S Z)) `∷ ((μ (ƛ (ƛ caseL (` Z) `[] ((` (S (S (S Z))) · ` (S Z)) `∷ (` (S (S (S (S Z)))) · ` (S (S (S Z))) · ` Z))))) · (ƛ `not (` Z)) · ` Z))) · `[]) —→⟨ ξ-∷₂ V-bool (β-ƛ V-[]) ⟩
    bool false `∷ caseL `[] `[] (((ƛ `not (` Z)) · ` (S Z)) `∷ ((μ (ƛ (ƛ caseL (` Z) `[] ((` (S (S (S Z))) · ` (S Z)) `∷ (` (S (S (S (S Z)))) · ` (S (S (S Z))) · ` Z))))) · (ƛ `not (` Z)) · ` Z)) —→⟨ ξ-∷₂ V-bool β-[] ⟩
    bool false `∷ `[] ∎

-- HID: USE THE PARSER TO WRITE FOR YOU
  -- Press C-c C-n, then enter eval expression
  -- e.g. C-c C-n eval (gas 5) (AND · (bool true) · (bool false) )
  -- will give you steps, profit!
  -- USE YOUR HOMEWORK TO WRITE YOUR HOMEWORK
  


-- 747/PLFA exercise: SumsEmpty (10 points)
-- Add sums and the empty type to the above, using the syntax and rules
-- given in PLFA More. If you want extra practice, add lists.
-- Include examples of computations for each new feature.

-- Hint: do these one at a time. Start with the empty type.
-- For each section in the file, think whether something has to be added, and what.
-- If you add constructors to an inductive datatype, loading the file
-- will helpfully tell you what cases are missing in code using it, and where.
