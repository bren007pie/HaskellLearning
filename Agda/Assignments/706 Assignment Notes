706 Assignment Notes

Assignment Handin (from Assignment 1)
-- Upload as AGDA code
-- Should have 0 type errors. Must compile. Will be severe if it doesn't compile
-- Should know is right because Agda is satisfied.
-- If give code that is wrong put it in a comment and say it's wrong
-- May run into problems of file encoding so if technology is the issue then no wories
-- 8 small assignments during the term of the course.
-- comment the code to say what you're doing, explain WHY you're doing it that way
-- comment basic idea of the algorithm. Add extra tests to show you know what you're doing
-- Don't forget to spell check
-- Extra marks will be given for good documentation. Marks will be deducted for lack of documentation.
-- You may hand in .lagda or .agda files, your choice. 
-- No need to be effecient but explain why you choose to do it that way


Feedback from Assignment 1
- based on my marking I should have gotten (1+2+2 + 1+2+2+ (maybe 1/3 for MultComm)
- So there was +2 (assuming got 1 on MultComm)+1+2+1+1+2
- So in my scheme I should get 11/20. Or by questions 7.5/13. Makes sense
From Carette:
Your editor seems to make long lines out of stuff... can you reconfigure it so that it doesn't?
Your comments are probably too verbose. The content of them (like for `inc`) is good, but you could have said the same thing with way fewer words.

Also, when commenting, don't bother with saying "base case" and "inductive case". Do say what you induct on though.  Example of good comments:
dbl : ℕ → ℕ 
dbl zero = zero  -- 2*0 = 0
dbl (suc m) = suc (suc (dbl m))  -- 2*(m+1) = (2*m) + 2

If you're commenting stuff that's already in the file for your own understanding (like 7+7=14 in binary), great, but no need to hand that in...

I prefer to have the equational proofs aligned differently (justifications on the right)

when proofs are trivial (like 'refl') such as in the first case of AddDistMult, go ahead and use that!
The weird error in *-comm is that you had 'n⟩' instead of 'n ⟩' (see that space?) and so it was taking the 'n⟩' as a single token and was missing the closing '⟩'.
Grading:
- -1 for incomplete *-comm
- -6 for missing pieces
7 / 14 - 50 %, I'm not sure how this is out of 14. There are 13 questions, and if using other scoring scheme there is 20 points. Was I missing a question?
Q) graded A1 out of 14 but I only counted 13 questions, was there a bonus or something? Also would you consider marking by points because some are much harder? Are there part marks for structures of a solution?



Tips from Dr. Carette (Assignment 2):
Assignments I just finished preparing the solutions for A2. So some hints:
- it's much easier to split things up into smaller files and import old things than to copy-paste. [I made some mistakes because I had different versions of the function in different files, and that caused much pain.]  I already did that with A1.
- the points associated to each function are a strong indication of their difficulty. OneToFrom really is more difficult (but not so bad if you do an equational proof and you have all your lemmas handy for re-use)
- using copatterns for IsoNCanR leads to a much simpler-looking proof.  As the things you need to fill are functions, you can then actually add that extra variable to the lhs and pattern-match on it as well. 
- after you split, the proof of OneDblbX0 should all be 'refl'. If it's not, you're using a bad 'dblb' implementation.


Based on Lectures (Assignment 3):
- Follow propper punning, instance of a set variable is in lowercase and the set variable is in uppercase. E.g. (A : set) (a : A).
- For nice readability make sure to line up equals signs, i.e. =, the way Dr. Carette does







